{"version":3,"sources":["AI/Bot.js","AI/EasyBot.js","AI/MediumBot.js","AI/runMediumNeuralNetwork.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","AI/HardBot.js","AI/index.js","AiPage/index.js"],"names":["Bot","playerID","name","guessCellToDropRectangle","currentPlayer","rowIndex","cellIndex","rectangleHeight","rectangleWidth","rows","this","EasyBot","result","columnIndex","Math","random","rectangles","findPotentiallyOccupiedRectangles","length","randomCell","floor","findRectangleRate","input","turn","rectangle","boardHeight","boardWidth","emptyCellsCount","normalizeInput","best","exp","MediumBot","concat","maxRate","forEach","rate","_arrayLikeToArray","arr","len","i","arr2","Array","_createForOfIteratorHelper","o","Symbol","iterator","isArray","minLen","n","Object","prototype","toString","call","slice","constructor","from","test","F","s","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","HardBot","boardCenterRowIndex","boardCenterColumnIndex","chosenRectangle","isEmptyCell","rectanglesInCenter","filter","inRectangle","selectedRowIndex","selectedColumnIndex","findClosestRectangleToCell","RECTANGLE_EDGE","CENTER_RIGHT","TOP_LEFT","TOP_RIGHT","BOTTOM_RIGHT","calculateDistance","fromRowIndex","fromColumnIndex","toRowIndex","toColumnIndex","sqrt","rectangleEdge","shift","calculateRectangleShift","minDistanceToCenter","rowShift","columnShift","distanceToCenter","BOTTOM_LEFT","BOT_TYPES","bot","options","Error","type","AI","PLAYER_2","AiPage","Client","game","Game","board","G","ctx","moves","events","isActive","UI","ai","debug"],"mappings":"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","file":"static/js/7.d64684ad.chunk.js","sourcesContent":["export default class Bot {\n  constructor({ playerID, name }) {\n    this.playerID = playerID;\n    this.name = name;\n  }\n\n  guessCellToDropRectangle = ({\n    currentPlayer,\n    rectangleHeight,\n    rectangleWidth,\n    rows\n  }) => ({\n    rowIndex: -1,\n    cellIndex: -1,\n    rectangleHeight,\n    rectangleWidth,\n    currentPlayer,\n    rows\n  });\n}\n","import Bot from \"./Bot\";\nimport { findPotentiallyOccupiedRectangles } from \"territories-core\";\n\nexport default class EasyBot extends Bot {\n  constructor({ playerID, name }) {\n    super({ playerID, name: name || \"Easy Bot\" });\n  }\n\n  guessCellToDropRectangle = ({\n    currentPlayer,\n    rectangleHeight,\n    rectangleWidth,\n    rows\n  }) => {\n    const result = {\n      rowIndex: -1,\n      columnIndex: -1,\n      rectangleHeight,\n      rectangleWidth\n    };\n\n    if (Math.random() >= 0.5) {\n      result.rectangleHeight = rectangleWidth;\n      result.rectangleWidth = rectangleHeight;\n    }\n\n    const rectangles = findPotentiallyOccupiedRectangles({\n      currentPlayer,\n      rectangleHeight: result.rectangleHeight,\n      rectangleWidth: result.rectangleWidth,\n      rows\n    });\n\n    if (rectangles.length === 0) {\n      return result;\n    }\n\n    const randomCell =\n      rectangles[Math.floor(Math.random() * rectangles.length)];\n    result.rowIndex = randomCell.rowIndex;\n    result.columnIndex = randomCell.columnIndex;\n    return result;\n  };\n}\n","import Bot from \"./Bot\";\nimport { findPotentiallyOccupiedRectangles } from \"territories-core\";\nimport runMediumNeuralNetwork from \"./runMediumNeuralNetwork\";\n\nconst normalizeInput = ({\n  turn,\n  rectangle,\n  boardHeight,\n  boardWidth,\n  emptyCellsCount\n}) => ({\n  turn: turn / 10000,\n  columnIndex: rectangle.columnIndex / boardWidth,\n  rowIndex: rectangle.rowIndex / boardHeight,\n  rectangleHeight: rectangle.rectangleHeight / 6,\n  rectangleWidth: rectangle.rectangleWidth / 6,\n  emptyCellsCount: emptyCellsCount / (boardHeight * boardWidth)\n});\n\nconst findRectangleRate = ({\n  turn,\n  rectangle,\n  boardHeight,\n  boardWidth,\n  emptyCellsCount\n}) => {\n  return runMediumNeuralNetwork(\n    normalizeInput({\n      turn,\n      rectangle,\n      boardHeight,\n      boardWidth,\n      emptyCellsCount\n    })\n  ).best;\n};\n\nexport default class MediumBot extends Bot {\n  constructor({ playerID, name }) {\n    super({ playerID, name: name || \"Medium Bot\" });\n  }\n\n  guessCellToDropRectangle = ({\n    turn,\n    currentPlayer,\n    rectangleHeight,\n    rectangleWidth,\n    rows,\n    emptyCellsCount\n  }) => {\n    const result = {\n      rowIndex: -1,\n      columnIndex: -1,\n      rectangleHeight,\n      rectangleWidth\n    };\n\n    const rectangles = findPotentiallyOccupiedRectangles({\n      currentPlayer,\n      rectangleHeight: result.rectangleHeight,\n      rectangleWidth: result.rectangleWidth,\n      rows\n    }).concat(\n      rectangleHeight === rectangleWidth\n        ? []\n        : findPotentiallyOccupiedRectangles({\n            currentPlayer,\n            rectangleHeight: rectangleWidth,\n            rectangleWidth: rectangleHeight,\n            rows\n          })\n    );\n\n    if (rectangles.length === 0) {\n      return result;\n    }\n\n    const boardHeight = rows.length;\n    const boardWidth = rows[0].length;\n\n    let maxRate = 0;\n    rectangles.forEach(rectangle => {\n      const rate = findRectangleRate({\n        turn,\n        rectangle,\n        boardHeight,\n        boardWidth,\n        emptyCellsCount\n      });\n\n      if (rate > maxRate) {\n        maxRate = rate;\n        result.rowIndex = rectangle.rowIndex;\n        result.columnIndex = rectangle.columnIndex;\n        result.rectangleHeight = rectangle.rectangleHeight;\n        result.rectangleWidth = rectangle.rectangleWidth;\n      }\n    });\n\n    return result;\n  };\n}\n","export default input => {\n  return {\n    best:\n      1 /\n      (1 +\n        1 /\n          Math.exp(\n            33.09363555908203 -\n              (18.816131591796875 * 1) /\n                (1 +\n                  1 /\n                    Math.exp(\n                      20.226030349731445 +\n                        0.006019400432705879 * input[\"turn\"] +\n                        6.525365829467773 * input[\"columnIndex\"] +\n                        4.9635748863220215 * input[\"rowIndex\"] +\n                        25.573339462280273 * input[\"rectangleHeight\"] -\n                        41.287147521972656 * input[\"rectangleWidth\"] -\n                        5.127196311950684 * input[\"emptyCellsCount\"]\n                    )) -\n              (18.491500854492188 * 1) /\n                (1 +\n                  1 /\n                    Math.exp(\n                      -13.770045280456543 -\n                        0.5661401748657227 * input[\"turn\"] +\n                        44.73406982421875 * input[\"columnIndex\"] +\n                        5.764463424682617 * input[\"rowIndex\"] -\n                        3.1857664585113525 * input[\"rectangleHeight\"] +\n                        6.251440525054932 * input[\"rectangleWidth\"] -\n                        18.625091552734375 * input[\"emptyCellsCount\"]\n                    )) -\n              (14.760644912719727 * 1) /\n                (1 +\n                  1 /\n                    Math.exp(\n                      2.9342174530029297 -\n                        0.06486324220895767 * input[\"turn\"] +\n                        18.163259506225586 * input[\"columnIndex\"] -\n                        20.946380615234375 * input[\"rowIndex\"] +\n                        13.361632347106934 * input[\"rectangleHeight\"] -\n                        14.830757141113281 * input[\"rectangleWidth\"] +\n                        15.96739387512207 * input[\"emptyCellsCount\"]\n                    ))\n          ))\n  };\n};\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import Bot from \"./Bot\";\nimport {\n  isEmptyCell,\n  inRectangle,\n  findPotentiallyOccupiedRectangles,\n} from \"territories-core\";\n\nexport default class HardBot extends Bot {\n  static RECTANGLE_EDGE = {\n    TOP_LEFT: \"TOP_LEFT\",\n    TOP_RIGHT: \"TOP_RIGHT\",\n    BOTTOM_LEFT: \"BOTTOM_LEFT\",\n    BOTTOM_RIGHT: \"BOTTOM_RIGHT\",\n    CENTER_RIGHT: \"CENTER_RIGHT\",\n  };\n\n  constructor({ playerID, name }) {\n    super({ playerID, name: name || \"Bot\" });\n  }\n\n  guessCellToDropRectangle = ({\n    currentPlayer,\n    rectangleHeight,\n    rectangleWidth,\n    rows,\n  }) => {\n    const result = {\n      rowIndex: -1,\n      columnIndex: -1,\n      rectangleHeight,\n      rectangleWidth,\n    };\n\n    const rectangles = findPotentiallyOccupiedRectangles({\n      currentPlayer,\n      rectangleHeight,\n      rectangleWidth,\n      rows,\n    }).concat(\n      rectangleHeight === rectangleWidth\n        ? []\n        : findPotentiallyOccupiedRectangles({\n            currentPlayer,\n            rectangleHeight: rectangleWidth,\n            rectangleWidth: rectangleHeight,\n            rows,\n          })\n    );\n\n    if (rectangles.length === 0) {\n      return result;\n    }\n\n    const boardWidth = rows.length;\n    const boardHeight = rows[0].length;\n    const boardCenterRowIndex = Math.floor(boardWidth / 2);\n    const boardCenterColumnIndex = Math.floor(boardHeight / 2);\n\n    let chosenRectangle = rectangles[0];\n\n    if (isEmptyCell(rows[boardCenterRowIndex][boardCenterColumnIndex])) {\n      // TODO Go to the top left until 7 cells horizontal distance from the rightmost enemy cell?\n\n      // center is not taken\n      // if any rectangle touches board center - find one that is closest to rectangle right center\n      // else find one that makes left top closest to board center\n      const rectanglesInCenter = rectangles.filter((rectangle) =>\n        inRectangle({\n          rowIndex: boardCenterRowIndex,\n          columnIndex: boardCenterColumnIndex,\n          selectedRowIndex: rectangle.rowIndex,\n          selectedColumnIndex: rectangle.columnIndex,\n          rectangleHeight: rectangle.rectangleHeight,\n          rectangleWidth: rectangle.rectangleWidth,\n        })\n      );\n      if (rectanglesInCenter.length > 0) {\n        chosenRectangle = this.findClosestRectangleToCell(\n          rectanglesInCenter,\n          boardCenterRowIndex,\n          boardCenterColumnIndex,\n          HardBot.RECTANGLE_EDGE.CENTER_RIGHT\n        );\n      } else {\n        chosenRectangle = this.findClosestRectangleToCell(\n          rectangles,\n          boardCenterRowIndex,\n          boardCenterColumnIndex,\n          HardBot.RECTANGLE_EDGE.TOP_LEFT\n        );\n      }\n    } else if (isEmptyCell(rows[0][boardCenterColumnIndex])) {\n      // top center is not taken\n      chosenRectangle = this.findClosestRectangleToCell(\n        rectangles,\n        0,\n        boardCenterColumnIndex - Math.floor(Math.random() * 4),\n        HardBot.RECTANGLE_EDGE.TOP_RIGHT\n      );\n    } else if (isEmptyCell(rows[rows.length - 1][boardCenterColumnIndex])) {\n      // bottom center is not taken\n      chosenRectangle = this.findClosestRectangleToCell(\n        rectangles,\n        rows.length - 1,\n        boardCenterColumnIndex - Math.floor(Math.random() * 4),\n        HardBot.RECTANGLE_EDGE.BOTTOM_RIGHT\n      );\n    }\n\n    // else if center is taken\n    // randomly go to the top or bottom top point\n    // if not taken\n\n    // else if center is taken\n    // if enemy direction is top - find rightest row and go to the highest point with lefttop rectangle (block his way) until 2 cells before border\n    // if enemy direction is bottom - find rightest row and go to the lowest point with leftbottom rectangle (block his way) until 2 cells before border\n    // if enemy direction is center???\n\n    // or random for attack-block?\n\n    // else ?? Try to block the way\n    // Or choose leftmost from all cells?\n    // Or find the way to try all cases and see which one gives more income\n\n    result.rowIndex = chosenRectangle.rowIndex;\n    result.columnIndex = chosenRectangle.columnIndex;\n    result.rectangleHeight = chosenRectangle.rectangleHeight;\n    result.rectangleWidth = chosenRectangle.rectangleWidth;\n    return result;\n  };\n\n  calculateDistance = ({\n    fromRowIndex,\n    fromColumnIndex,\n    toRowIndex,\n    toColumnIndex,\n  }) => {\n    return Math.sqrt(\n      (fromRowIndex - toRowIndex) ** 2 + (fromColumnIndex - toColumnIndex) ** 2\n    );\n  };\n\n  findClosestRectangleToCell = (\n    rectangles,\n    rowIndex,\n    columnIndex,\n    rectangleEdge = HardBot.RECTANGLE_EDGE.TOP_LEFT // TODO fill with (TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT)\n  ) => {\n    let chosenRectangle = rectangles[0];\n\n    let shift = this.calculateRectangleShift(rectangleEdge, chosenRectangle);\n    let minDistanceToCenter = this.calculateDistance({\n      fromRowIndex: chosenRectangle.rowIndex + shift.rowShift,\n      fromColumnIndex: chosenRectangle.columnIndex + shift.columnShift,\n      toRowIndex: rowIndex,\n      toColumnIndex: columnIndex,\n    });\n    for (const rectangle of rectangles) {\n      shift = this.calculateRectangleShift(rectangleEdge, rectangle);\n\n      const distanceToCenter = this.calculateDistance({\n        fromRowIndex: rectangle.rowIndex + shift.rowShift,\n        fromColumnIndex: rectangle.columnIndex + shift.columnShift,\n        toRowIndex: rowIndex,\n        toColumnIndex: columnIndex,\n      });\n      if (distanceToCenter < minDistanceToCenter) {\n        minDistanceToCenter = distanceToCenter;\n        chosenRectangle = rectangle;\n      }\n    }\n    return chosenRectangle;\n  };\n\n  calculateRectangleShift = (rectangleEdge, rectangle) => {\n    const shift = {\n      rowShift: 0,\n      columnShift: 0,\n    };\n    switch (rectangleEdge) {\n      case HardBot.RECTANGLE_EDGE.CENTER_RIGHT: {\n        shift.rowShift = Math.floor(rectangle.rectangleHeight / 2);\n        shift.columnShift = Math.floor(rectangle.rectangleWidth);\n        break;\n      }\n      case HardBot.RECTANGLE_EDGE.BOTTOM_LEFT: {\n        shift.rowShift = rectangle.rectangleHeight;\n        break;\n      }\n      case HardBot.RECTANGLE_EDGE.BOTTOM_RIGHT: {\n        shift.rowShift = rectangle.rectangleHeight;\n        shift.columnShift = rectangle.rectangleWidth;\n        break;\n      }\n      case HardBot.RECTANGLE_EDGE.TOP_RIGHT: {\n        shift.columnShift = rectangle.rectangleWidth;\n        break;\n      }\n      case HardBot.RECTANGLE_EDGE.TOP_LEFT:\n      default: {\n        break;\n      }\n    }\n    return shift;\n  };\n}\n","import EasyBot from \"./EasyBot\";\nimport MediumBot from \"./MediumBot\";\nimport HardBot from \"./HardBot\";\n\nexport const BOT_TYPES = {\n  EASY: \"EASY\",\n  MEDIUM: \"MEDIUM\",\n  HARD: \"HARD\"\n};\n\nexport default options => {\n  if (!options || !options.playerID) {\n    throw new Error(\"playerID parameter is missing\");\n  }\n\n  const { playerID, name, type } = options;\n  if (type === BOT_TYPES.HARD) {\n    return new HardBot({ playerID, name });\n  }\n\n  if (type === BOT_TYPES.MEDIUM) {\n    return new MediumBot({ playerID, name });\n  }\n\n  return new EasyBot({ playerID, name });\n};\n","import React from \"react\";\nimport { Client } from \"boardgame.io/react\";\nimport { Game, PLAYER_2 } from \"territories-core\";\n\nimport AI, { BOT_TYPES } from \"../AI\";\nimport UI from \"../UI\";\n\nconst bot = AI({ playerID: PLAYER_2, type: BOT_TYPES.HARD });\n\n// TODO add redux enhancer with redux-persist, so game can be resumed\nconst AiPage = Client({\n  game: Game,\n  board: ({ G, ctx, moves, events, isActive }) => (\n    <UI\n      ai={bot}\n      G={G}\n      ctx={ctx}\n      moves={moves}\n      events={events}\n      isActive={isActive}\n    />\n  ),\n  debug: false\n});\n\nexport default AiPage;\n"],"sourceRoot":""}